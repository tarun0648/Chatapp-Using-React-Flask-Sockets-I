{"ast":null,"code":"const BACKEND_URL = 'http://localhost:5000';\nconst handleResponse = async res => {\n  if (!res.ok) {\n    const error = await res.json();\n    throw new Error(error.message || 'API error');\n  }\n  return res.json();\n};\nconst api = {\n  // 🔐 Auth\n  login: async credentials => {\n    const res = await fetch(`${BACKEND_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    return handleResponse(res);\n  },\n  signup: async userData => {\n    const res = await fetch(`${BACKEND_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    return handleResponse(res);\n  },\n  // 👤 Profile\n  getProfile: async userId => {\n    const res = await fetch(`${BACKEND_URL}/user/${userId}`);\n    return handleResponse(res);\n  },\n  updateProfile: async (userId, profileData) => {\n    const res = await fetch(`${BACKEND_URL}/user/${userId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(profileData)\n    });\n    return handleResponse(res);\n  },\n  // 💬 Messages\n  getMessages: async chatId => {\n    const res = await fetch(`${BACKEND_URL}/messages/${chatId}`);\n    return handleResponse(res);\n  },\n  sendMessage: async messageData => {\n    const res = await fetch(`${BACKEND_URL}/messages`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(messageData)\n    });\n    return handleResponse(res);\n  },\n  // 📱 Chats\n  getChats: async userId => {\n    const res = await fetch(`${BACKEND_URL}/chats/${userId}`);\n    return handleResponse(res);\n  },\n  // 👥 Groups (if using group chat)\n  getUserGroups: async userId => {\n    const res = await fetch(`${BACKEND_URL}/groups/${userId}`);\n    return handleResponse(res);\n  },\n  sendGroupMessage: async messageData => {\n    const res = await fetch(`${BACKEND_URL}/group-messages`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(messageData)\n    });\n    return handleResponse(res);\n  },\n  getGroupMessages: async groupId => {\n    const res = await fetch(`${BACKEND_URL}/group-messages/${groupId}`);\n    return handleResponse(res);\n  }\n};\nexport default api;","map":{"version":3,"names":["BACKEND_URL","handleResponse","res","ok","error","json","Error","message","api","login","credentials","fetch","method","headers","body","JSON","stringify","signup","userData","getProfile","userId","updateProfile","profileData","getMessages","chatId","sendMessage","messageData","getChats","getUserGroups","sendGroupMessage","getGroupMessages","groupId"],"sources":["C:/Users/tarun/Downloads/chatappfinal/chat-frontend/src/services/api.js"],"sourcesContent":["const BACKEND_URL = 'http://localhost:5000';\r\n\r\nconst handleResponse = async (res) => {\r\n  if (!res.ok) {\r\n    const error = await res.json();\r\n    throw new Error(error.message || 'API error');\r\n  }\r\n  return res.json();\r\n};\r\n\r\nconst api = {\r\n  // 🔐 Auth\r\n  login: async (credentials) => {\r\n    const res = await fetch(`${BACKEND_URL}/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    return handleResponse(res);\r\n  },\r\n\r\n  signup: async (userData) => {\r\n    const res = await fetch(`${BACKEND_URL}/register`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    return handleResponse(res);\r\n  },\r\n\r\n  // 👤 Profile\r\n  getProfile: async (userId) => {\r\n    const res = await fetch(`${BACKEND_URL}/user/${userId}`);\r\n    return handleResponse(res);\r\n  },\r\n\r\n  updateProfile: async (userId, profileData) => {\r\n    const res = await fetch(`${BACKEND_URL}/user/${userId}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(profileData),\r\n    });\r\n    return handleResponse(res);\r\n  },\r\n\r\n  // 💬 Messages\r\n  getMessages: async (chatId) => {\r\n    const res = await fetch(`${BACKEND_URL}/messages/${chatId}`);\r\n    return handleResponse(res);\r\n  },\r\n\r\n  sendMessage: async (messageData) => {\r\n    const res = await fetch(`${BACKEND_URL}/messages`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(messageData),\r\n    });\r\n    return handleResponse(res);\r\n  },\r\n\r\n  // 📱 Chats\r\n  getChats: async (userId) => {\r\n    const res = await fetch(`${BACKEND_URL}/chats/${userId}`);\r\n    return handleResponse(res);\r\n  },\r\n\r\n  // 👥 Groups (if using group chat)\r\n  getUserGroups: async (userId) => {\r\n    const res = await fetch(`${BACKEND_URL}/groups/${userId}`);\r\n    return handleResponse(res);\r\n  },\r\n\r\n  sendGroupMessage: async (messageData) => {\r\n    const res = await fetch(`${BACKEND_URL}/group-messages`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(messageData),\r\n    });\r\n    return handleResponse(res);\r\n  },\r\n\r\n  getGroupMessages: async (groupId) => {\r\n    const res = await fetch(`${BACKEND_URL}/group-messages/${groupId}`);\r\n    return handleResponse(res);\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
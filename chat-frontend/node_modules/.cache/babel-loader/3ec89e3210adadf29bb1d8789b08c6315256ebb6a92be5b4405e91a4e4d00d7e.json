{"ast":null,"code":"const API_BASE = 'http://localhost:5000';\nexport const api = {\n  login: async credentials => {\n    try {\n      const response = await fetch(`${API_BASE}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n      return data;\n    } catch (error) {\n      console.error('API: Login error:', error);\n      throw error;\n    }\n  },\n  signup: async userData => {\n    try {\n      const response = await fetch(`${API_BASE}/auth/signup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Signup failed');\n      }\n      return data;\n    } catch (error) {\n      console.error('API: Signup error:', error);\n      throw error;\n    }\n  },\n  getProfile: async token => {\n    try {\n      const response = await fetch(`${API_BASE}/user/profile/${token}`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to get profile');\n      }\n      return data;\n    } catch (error) {\n      console.error('API: Profile error:', error);\n      throw error;\n    }\n  },\n  getChats: async userId => {\n    try {\n      const response = await fetch(`${API_BASE}/user/chats/${userId}`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to get chats');\n      }\n      return data;\n    } catch (error) {\n      console.error('API: Chats error:', error);\n      throw error;\n    }\n  },\n  getMessages: async chatId => {\n    try {\n      const response = await fetch(`${API_BASE}/chat/${chatId}`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to get messages');\n      }\n      return data;\n    } catch (error) {\n      console.error('API: Messages error:', error);\n      throw error;\n    }\n  },\n  sendMessage: async messageData => {\n    try {\n      const response = await fetch(`${API_BASE}/chat/message`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(messageData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to send message');\n      }\n      return data;\n    } catch (error) {\n      console.error('API: Send message error:', error);\n      throw error;\n    }\n  },\n  markMessagesAsRead: async readData => {\n    try {\n      const response = await fetch(`${API_BASE}/chat/mark-read`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(readData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to mark messages as read');\n      }\n      return data;\n    } catch (error) {\n      console.error('API: Mark read error:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE","api","login","credentials","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","error","console","signup","userData","getProfile","token","getChats","userId","getMessages","chatId","sendMessage","messageData","markMessagesAsRead","readData"],"sources":["C:/Users/tarun/Downloads/chatappfinal/chat-frontend/src/services/api.js"],"sourcesContent":["const API_BASE = 'http://localhost:5000';\r\n\r\nexport const api = {\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE}/auth/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(credentials)\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Login failed');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('API: Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  signup: async (userData) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE}/auth/signup`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(userData)\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Signup failed');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('API: Signup error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getProfile: async (token) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE}/user/profile/${token}`);\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to get profile');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('API: Profile error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getChats: async (userId) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE}/user/chats/${userId}`);\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to get chats');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('API: Chats error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getMessages: async (chatId) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE}/chat/${chatId}`);\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to get messages');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('API: Messages error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  sendMessage: async (messageData) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE}/chat/message`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(messageData)\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to send message');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('API: Send message error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  markMessagesAsRead: async (readData) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE}/chat/mark-read`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(readData)\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to mark messages as read');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('API: Mark read error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
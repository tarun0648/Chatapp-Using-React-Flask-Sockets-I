{"ast":null,"code":"import { io } from 'socket.io-client';\nlet socket = null;\nexport const initSocket = () => {\n  if (!socket || socket.disconnected) {\n    console.log('Initializing new socket connection...');\n    socket = io('http://localhost:5000', {\n      autoConnect: false,\n      transports: ['websocket', 'polling'],\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 20000,\n      forceNew: false\n    });\n    socket.on('connect', () => {\n      console.log('Socket connected:', socket.id);\n    });\n    socket.on('disconnect', reason => {\n      console.log('Socket disconnected:', reason);\n      if (reason === 'io server disconnect') {\n        // the disconnection was initiated by the server, reconnect manually\n        console.log('Server initiated disconnect, reconnecting...');\n        socket.connect();\n      }\n    });\n    socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      // Retry connection after a delay\n      setTimeout(() => {\n        if (socket && !socket.connected) {\n          console.log('Retrying socket connection...');\n          socket.connect();\n        }\n      }, 2000);\n    });\n    socket.on('reconnect', attemptNumber => {\n      console.log('Socket reconnected after', attemptNumber, 'attempts');\n    });\n    socket.on('reconnect_error', error => {\n      console.error('Socket reconnection error:', error);\n    });\n    socket.on('reconnect_failed', () => {\n      console.error('Socket reconnection failed');\n    });\n\n    // Add error handler for general socket errors\n    socket.on('error', error => {\n      console.error('Socket error:', error);\n    });\n\n    // Add handler for pong response\n    socket.on('pong', () => {\n      console.log('Received pong from server');\n    });\n  }\n  return socket;\n};\nexport const getSocket = () => {\n  if (!socket) {\n    return initSocket();\n  }\n  return socket;\n};\nexport const disconnectSocket = () => {\n  if (socket) {\n    console.log('Disconnecting socket');\n    socket.disconnect();\n    socket = null;\n  }\n};\nexport const connectSocket = () => {\n  if (socket && !socket.connected) {\n    console.log('Connecting socket');\n    socket.connect();\n  }\n};\nexport const isSocketConnected = () => {\n  return socket && socket.connected;\n};\n\n// Helper function to ensure socket is connected before emitting\nexport const emitWithConnection = (event, data, callback) => {\n  if (socket && socket.connected) {\n    socket.emit(event, data, callback);\n    return true;\n  } else {\n    console.warn(`Cannot emit ${event}: socket not connected`);\n    // Try to reconnect\n    if (socket) {\n      socket.connect();\n    }\n    return false;\n  }\n};\n\n// Ping function to keep connection alive\nexport const pingServer = () => {\n  if (socket && socket.connected) {\n    socket.emit('ping');\n  }\n};\n\n// Set up periodic ping to keep connection alive\nlet pingInterval = null;\nexport const startPingInterval = () => {\n  if (pingInterval) {\n    clearInterval(pingInterval);\n  }\n  pingInterval = setInterval(() => {\n    pingServer();\n  }, 30000); // Ping every 30 seconds\n};\nexport const stopPingInterval = () => {\n  if (pingInterval) {\n    clearInterval(pingInterval);\n    pingInterval = null;\n  }\n};","map":{"version":3,"names":["io","socket","initSocket","disconnected","console","log","autoConnect","transports","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","forceNew","on","id","reason","connect","error","setTimeout","connected","attemptNumber","getSocket","disconnectSocket","disconnect","connectSocket","isSocketConnected","emitWithConnection","event","data","callback","emit","warn","pingServer","pingInterval","startPingInterval","clearInterval","setInterval","stopPingInterval"],"sources":["C:/Users/tarun/Downloads/chatappfinal/chat-frontend/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nlet socket = null;\r\n\r\nexport const initSocket = () => {\r\n  if (!socket || socket.disconnected) {\r\n    console.log('Initializing new socket connection...');\r\n    socket = io('http://localhost:5000', {\r\n      autoConnect: false,\r\n      transports: ['websocket', 'polling'],\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n      reconnectionDelayMax: 5000,\r\n      timeout: 20000,\r\n      forceNew: false,\r\n    });\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Socket connected:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', (reason) => {\r\n      console.log('Socket disconnected:', reason);\r\n      if (reason === 'io server disconnect') {\r\n        // the disconnection was initiated by the server, reconnect manually\r\n        console.log('Server initiated disconnect, reconnecting...');\r\n        socket.connect();\r\n      }\r\n    });\r\n\r\n    socket.on('connect_error', (error) => {\r\n      console.error('Socket connection error:', error);\r\n      // Retry connection after a delay\r\n      setTimeout(() => {\r\n        if (socket && !socket.connected) {\r\n          console.log('Retrying socket connection...');\r\n          socket.connect();\r\n        }\r\n      }, 2000);\r\n    });\r\n\r\n    socket.on('reconnect', (attemptNumber) => {\r\n      console.log('Socket reconnected after', attemptNumber, 'attempts');\r\n    });\r\n\r\n    socket.on('reconnect_error', (error) => {\r\n      console.error('Socket reconnection error:', error);\r\n    });\r\n\r\n    socket.on('reconnect_failed', () => {\r\n      console.error('Socket reconnection failed');\r\n    });\r\n\r\n    // Add error handler for general socket errors\r\n    socket.on('error', (error) => {\r\n      console.error('Socket error:', error);\r\n    });\r\n\r\n    // Add handler for pong response\r\n    socket.on('pong', () => {\r\n      console.log('Received pong from server');\r\n    });\r\n  }\r\n  \r\n  return socket;\r\n};\r\n\r\nexport const getSocket = () => {\r\n  if (!socket) {\r\n    return initSocket();\r\n  }\r\n  return socket;\r\n};\r\n\r\nexport const disconnectSocket = () => {\r\n  if (socket) {\r\n    console.log('Disconnecting socket');\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};\r\n\r\nexport const connectSocket = () => {\r\n  if (socket && !socket.connected) {\r\n    console.log('Connecting socket');\r\n    socket.connect();\r\n  }\r\n};\r\n\r\nexport const isSocketConnected = () => {\r\n  return socket && socket.connected;\r\n};\r\n\r\n// Helper function to ensure socket is connected before emitting\r\nexport const emitWithConnection = (event, data, callback) => {\r\n  if (socket && socket.connected) {\r\n    socket.emit(event, data, callback);\r\n    return true;\r\n  } else {\r\n    console.warn(`Cannot emit ${event}: socket not connected`);\r\n    // Try to reconnect\r\n    if (socket) {\r\n      socket.connect();\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\n// Ping function to keep connection alive\r\nexport const pingServer = () => {\r\n  if (socket && socket.connected) {\r\n    socket.emit('ping');\r\n  }\r\n};\r\n\r\n// Set up periodic ping to keep connection alive\r\nlet pingInterval = null;\r\n\r\nexport const startPingInterval = () => {\r\n  if (pingInterval) {\r\n    clearInterval(pingInterval);\r\n  }\r\n  \r\n  pingInterval = setInterval(() => {\r\n    pingServer();\r\n  }, 30000); // Ping every 30 seconds\r\n};\r\n\r\nexport const stopPingInterval = () => {\r\n  if (pingInterval) {\r\n    clearInterval(pingInterval);\r\n    pingInterval = null;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"const API_BASE = 'http://localhost:5000';\nexport const api = {\n  login: async credentials => {\n    const response = await fetch(`${API_BASE}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await response.json();\n    if (!response.ok) throw new Error(data.message || 'Login failed');\n    return data;\n  },\n  signup: async userData => {\n    const response = await fetch(`${API_BASE}/auth/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!response.ok) throw new Error(data.message || 'Signup failed');\n    return data;\n  },\n  getProfile: async token => {\n    const response = await fetch(`${API_BASE}/user/profile/${token}`);\n    const data = await response.json();\n    if (!response.ok) throw new Error(data.message || 'Failed to get profile');\n    return data;\n  },\n  getChats: async userId => {\n    const response = await fetch(`${API_BASE}/user/chats/${userId}`);\n    const data = await response.json();\n    if (!response.ok) throw new Error(data.message || 'Failed to get chats');\n    return data;\n  },\n  getMessages: async chatId => {\n    const response = await fetch(`${API_BASE}/chat/${chatId}`);\n    const data = await response.json();\n    if (!response.ok) throw new Error(data.message || 'Failed to get messages');\n    return data;\n  },\n  sendMessage: async messageData => {\n    const response = await fetch(`${API_BASE}/chat/message`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(messageData)\n    });\n    const data = await response.json();\n    if (!response.ok) throw new Error(data.message || 'Failed to send message');\n    return data;\n  }\n};","map":{"version":3,"names":["API_BASE","api","login","credentials","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","signup","userData","getProfile","token","getChats","userId","getMessages","chatId","sendMessage","messageData"],"sources":["C:/Users/tarun/Downloads/chatappfinal/chat-frontend/src/services/api.js"],"sourcesContent":["const API_BASE = 'http://localhost:5000';\r\n\r\nexport const api = {\r\n  login: async (credentials) => {\r\n    const response = await fetch(`${API_BASE}/auth/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(credentials)\r\n    });\r\n    const data = await response.json();\r\n    if (!response.ok) throw new Error(data.message || 'Login failed');\r\n    return data;\r\n  },\r\n\r\n  signup: async (userData) => {\r\n    const response = await fetch(`${API_BASE}/auth/signup`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData)\r\n    });\r\n    const data = await response.json();\r\n    if (!response.ok) throw new Error(data.message || 'Signup failed');\r\n    return data;\r\n  },\r\n\r\n  getProfile: async (token) => {\r\n    const response = await fetch(`${API_BASE}/user/profile/${token}`);\r\n    const data = await response.json();\r\n    if (!response.ok) throw new Error(data.message || 'Failed to get profile');\r\n    return data;\r\n  },\r\n\r\n  getChats: async (userId) => {\r\n    const response = await fetch(`${API_BASE}/user/chats/${userId}`);\r\n    const data = await response.json();\r\n    if (!response.ok) throw new Error(data.message || 'Failed to get chats');\r\n    return data;\r\n  },\r\n\r\n  getMessages: async (chatId) => {\r\n    const response = await fetch(`${API_BASE}/chat/${chatId}`);\r\n    const data = await response.json();\r\n    if (!response.ok) throw new Error(data.message || 'Failed to get messages');\r\n    return data;\r\n  },\r\n\r\n  sendMessage: async (messageData) => {\r\n    const response = await fetch(`${API_BASE}/chat/message`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(messageData)\r\n    });\r\n    const data = await response.json();\r\n    if (!response.ok) throw new Error(data.message || 'Failed to send message');\r\n    return data;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
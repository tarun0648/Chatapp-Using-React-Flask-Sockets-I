{"ast":null,"code":"// frontend/src/services/socket.js - OPTIMIZED VERSION\nimport { io } from 'socket.io-client';\nlet socket = null;\nexport const initSocket = () => {\n  if (!socket || socket.disconnected) {\n    socket = io('http://localhost:5000', {\n      autoConnect: false,\n      transports: ['websocket', 'polling'],\n      reconnection: true,\n      reconnectionAttempts: 10,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 20000,\n      forceNew: false,\n      upgrade: true,\n      rememberUpgrade: true\n    });\n    socket.on('connect', () => {\n      console.log('🔌 Socket connected:', socket.id);\n    });\n    socket.on('disconnect', reason => {\n      console.log('🔌 Socket disconnected:', reason);\n      if (reason === 'io server disconnect') {\n        // the disconnection was initiated by the server, reconnect manually\n        socket.connect();\n      }\n    });\n    socket.on('connect_error', error => {\n      console.error('❌ Socket connection error:', error);\n    });\n    socket.on('reconnect', attemptNumber => {\n      console.log('🔄 Socket reconnected after', attemptNumber, 'attempts');\n    });\n    socket.on('reconnect_error', error => {\n      console.error('❌ Socket reconnection error:', error);\n    });\n    socket.on('reconnect_failed', () => {\n      console.error('❌ Socket reconnection failed');\n    });\n\n    // Add debug listeners for development\n    if (process.env.NODE_ENV === 'development') {\n      socket.onAny((event, ...args) => {\n        console.log('📡 Socket event received:', event, args);\n      });\n      socket.onAnyOutgoing((event, ...args) => {\n        console.log('📤 Socket event sent:', event, args);\n      });\n    }\n  }\n  return socket;\n};\nexport const getSocket = () => {\n  if (!socket) {\n    return initSocket();\n  }\n  return socket;\n};\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};\nexport const connectSocket = () => {\n  if (socket && !socket.connected) {\n    socket.connect();\n  }\n};\nexport const isSocketConnected = () => {\n  return socket && socket.connected;\n};","map":{"version":3,"names":["io","socket","initSocket","disconnected","autoConnect","transports","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","forceNew","upgrade","rememberUpgrade","on","console","log","id","reason","connect","error","attemptNumber","process","env","NODE_ENV","onAny","event","args","onAnyOutgoing","getSocket","disconnectSocket","disconnect","connectSocket","connected","isSocketConnected"],"sources":["C:/Users/tarun/Downloads/chatappfinal/chat-frontend/src/services/socket.js"],"sourcesContent":["// frontend/src/services/socket.js - OPTIMIZED VERSION\r\nimport { io } from 'socket.io-client';\r\n\r\nlet socket = null;\r\n\r\nexport const initSocket = () => {\r\n  if (!socket || socket.disconnected) {\r\n    socket = io('http://localhost:5000', {\r\n      autoConnect: false,\r\n      transports: ['websocket', 'polling'],\r\n      reconnection: true,\r\n      reconnectionAttempts: 10,\r\n      reconnectionDelay: 1000,\r\n      reconnectionDelayMax: 5000,\r\n      timeout: 20000,\r\n      forceNew: false,\r\n      upgrade: true,\r\n      rememberUpgrade: true\r\n    });\r\n\r\n    socket.on('connect', () => {\r\n      console.log('🔌 Socket connected:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', (reason) => {\r\n      console.log('🔌 Socket disconnected:', reason);\r\n      if (reason === 'io server disconnect') {\r\n        // the disconnection was initiated by the server, reconnect manually\r\n        socket.connect();\r\n      }\r\n    });\r\n\r\n    socket.on('connect_error', (error) => {\r\n      console.error('❌ Socket connection error:', error);\r\n    });\r\n\r\n    socket.on('reconnect', (attemptNumber) => {\r\n      console.log('🔄 Socket reconnected after', attemptNumber, 'attempts');\r\n    });\r\n\r\n    socket.on('reconnect_error', (error) => {\r\n      console.error('❌ Socket reconnection error:', error);\r\n    });\r\n\r\n    socket.on('reconnect_failed', () => {\r\n      console.error('❌ Socket reconnection failed');\r\n    });\r\n\r\n    // Add debug listeners for development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      socket.onAny((event, ...args) => {\r\n        console.log('📡 Socket event received:', event, args);\r\n      });\r\n\r\n      socket.onAnyOutgoing((event, ...args) => {\r\n        console.log('📤 Socket event sent:', event, args);\r\n      });\r\n    }\r\n  }\r\n  \r\n  return socket;\r\n};\r\n\r\nexport const getSocket = () => {\r\n  if (!socket) {\r\n    return initSocket();\r\n  }\r\n  return socket;\r\n};\r\n\r\nexport const disconnectSocket = () => {\r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};\r\n\r\nexport const connectSocket = () => {\r\n  if (socket && !socket.connected) {\r\n    socket.connect();\r\n  }\r\n};\r\n\r\nexport const isSocketConnected = () => {\r\n  return socket && socket.connected;\r\n};"],"mappings":"AAAA;AACA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,IAAIC,MAAM,GAAG,IAAI;AAEjB,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC9B,IAAI,CAACD,MAAM,IAAIA,MAAM,CAACE,YAAY,EAAE;IAClCF,MAAM,GAAGD,EAAE,CAAC,uBAAuB,EAAE;MACnCI,WAAW,EAAE,KAAK;MAClBC,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;MACpCC,YAAY,EAAE,IAAI;MAClBC,oBAAoB,EAAE,EAAE;MACxBC,iBAAiB,EAAE,IAAI;MACvBC,oBAAoB,EAAE,IAAI;MAC1BC,OAAO,EAAE,KAAK;MACdC,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE,IAAI;MACbC,eAAe,EAAE;IACnB,CAAC,CAAC;IAEFZ,MAAM,CAACa,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEf,MAAM,CAACgB,EAAE,CAAC;IAChD,CAAC,CAAC;IAEFhB,MAAM,CAACa,EAAE,CAAC,YAAY,EAAGI,MAAM,IAAK;MAClCH,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEE,MAAM,CAAC;MAC9C,IAAIA,MAAM,KAAK,sBAAsB,EAAE;QACrC;QACAjB,MAAM,CAACkB,OAAO,CAAC,CAAC;MAClB;IACF,CAAC,CAAC;IAEFlB,MAAM,CAACa,EAAE,CAAC,eAAe,EAAGM,KAAK,IAAK;MACpCL,OAAO,CAACK,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;IAEFnB,MAAM,CAACa,EAAE,CAAC,WAAW,EAAGO,aAAa,IAAK;MACxCN,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEK,aAAa,EAAE,UAAU,CAAC;IACvE,CAAC,CAAC;IAEFpB,MAAM,CAACa,EAAE,CAAC,iBAAiB,EAAGM,KAAK,IAAK;MACtCL,OAAO,CAACK,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;IAEFnB,MAAM,CAACa,EAAE,CAAC,kBAAkB,EAAE,MAAM;MAClCC,OAAO,CAACK,KAAK,CAAC,8BAA8B,CAAC;IAC/C,CAAC,CAAC;;IAEF;IACA,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1CvB,MAAM,CAACwB,KAAK,CAAC,CAACC,KAAK,EAAE,GAAGC,IAAI,KAAK;QAC/BZ,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEU,KAAK,EAAEC,IAAI,CAAC;MACvD,CAAC,CAAC;MAEF1B,MAAM,CAAC2B,aAAa,CAAC,CAACF,KAAK,EAAE,GAAGC,IAAI,KAAK;QACvCZ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEU,KAAK,EAAEC,IAAI,CAAC;MACnD,CAAC,CAAC;IACJ;EACF;EAEA,OAAO1B,MAAM;AACf,CAAC;AAED,OAAO,MAAM4B,SAAS,GAAGA,CAAA,KAAM;EAC7B,IAAI,CAAC5B,MAAM,EAAE;IACX,OAAOC,UAAU,CAAC,CAAC;EACrB;EACA,OAAOD,MAAM;AACf,CAAC;AAED,OAAO,MAAM6B,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAI7B,MAAM,EAAE;IACVA,MAAM,CAAC8B,UAAU,CAAC,CAAC;IACnB9B,MAAM,GAAG,IAAI;EACf;AACF,CAAC;AAED,OAAO,MAAM+B,aAAa,GAAGA,CAAA,KAAM;EACjC,IAAI/B,MAAM,IAAI,CAACA,MAAM,CAACgC,SAAS,EAAE;IAC/BhC,MAAM,CAACkB,OAAO,CAAC,CAAC;EAClB;AACF,CAAC;AAED,OAAO,MAAMe,iBAAiB,GAAGA,CAAA,KAAM;EACrC,OAAOjC,MAAM,IAAIA,MAAM,CAACgC,SAAS;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}